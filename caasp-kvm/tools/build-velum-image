#!/bin/bash
set -euo pipefail

DIR="$( cd "$( dirname "$0" )" && pwd )"

VELUM_DIR="$1"
IMAGE="$2"

# the output image
VELUM_DEVEL_IMAGE="$DIR/../resources/docker-images/velum-development.tar"

# Registry URLs JSON
REGISTRY_URLS_JSON=$(realpath $DIR/../../misc-files/registry-urls.json)

##################################################################

# Utility methods
log()        { (>&2 echo ">>> [build-velum-image] $@") ; }
warn()       { log "WARNING: $@" ; }
error()      { log "ERROR: $@" ; exit 1 ; }

# Helper function to get the velum-development reference
# most logic is to dynamically get to the newest tag
# can be dropped when registry.opensuse.org has a "latest" tag
kubic_velum_development_reference() {
  declare BASE_URL
  declare RELATIVE_PATH
  REGISTRY_URL=$(jq -r ".baseurl.${IMAGE:10}" $REGISTRY_URLS_JSON | sed 's/\/x86_64//g')
  IFS="/" read BASE_URL RELATIVE_PATH <<< "$REGISTRY_URL"

  TAGS_URL="https://$BASE_URL/v2/$RELATIVE_PATH/$IMAGE_DIST/velum-development/tags/list"

  TAGS=$(curl -s -D response $TAGS_URL | jq -r '.tags')

  if [[ ! -f response || $(grep '200 OK' response -c) == 0 ]]; then
    error "cannot get response"
  fi
  
  rm response;
  
  # And getting the first tag
  FIRST_TAG=$(echo $TAGS | jq -r '.[0]')
  echo $BASE_URL/$RELATIVE_PATH/$IMAGE_DIST/velum-development:${FIRST_TAG}
}


build_image() {
  pushd $VELUM_DIR > /dev/null
  log "Building velum image from Dockerfile located at $VELUM_DIR"
  docker build -t velum:development_local .
  popd > /dev/null
}


save_image() {
  rm -f "$VELUM_DEVEL_IMAGE"
  docker save $IMAGE_DIST/velum:development -o "$VELUM_DEVEL_IMAGE"
  chmod 644 "$VELUM_DEVEL_IMAGE"
  log "Velum image saved to $VELUM_DEVEL_IMAGE"
}


# get distribution
if [[ $(basename $IMAGE) =~ [Kk]ubic ]]; then
  IMAGE_DIST=kubic
  RUBY_VERSION=ruby2.5
else
  IMAGE_DIST=sles12
  RUBY_VERSION=ruby2.1
fi
# Image reference
if [[ $IMAGE == channel://* ]]; then
  IMAGE_REFERENCE=$(kubic_velum_development_reference)
elif [[ $IMAGE == file://* ]]; then
  IMAGE_REFERENCE=$IMAGE_DIST/velum-development:0.0
else
  IMAGE_REFERENCE=$IMAGE
fi

# Parse args
USE_CACHE=
while getopts ":c" opt; do
  case $opt in
    c)
      USE_CACHE=1
      ;;
    \?)
      log "Invalid option: -$OPTARG" >&2
      ;;
  esac
done
shift $(expr $OPTIND - 1 )

[ -d "$VELUM_DIR" ] || error "Velum directory $VELUM_DIR does not exist"
[ -n "$USE_CACHE" ] && [ -f "$VELUM_DEVEL_IMAGE" ] && {
  log "Using prebuilt image as requested, skipping build step."
  exit 0
}

build_image
save_image

